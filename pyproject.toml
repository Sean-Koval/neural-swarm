[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "fann-rust-core"
version = "0.1.0"
description = "High-performance neural network library with Python bindings via PyO3"
authors = [
    {name = "Neural Swarm Team", email = "neural-swarm@example.com"},
]
license = {text = "MIT OR Apache-2.0"}
readme = "README.md"
homepage = "https://github.com/neural-swarm/fann-rust-core"
repository = "https://github.com/neural-swarm/fann-rust-core"
documentation = "https://neural-swarm.github.io/fann-rust-core"
keywords = ["neural-network", "machine-learning", "deep-learning", "rust", "performance"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Rust",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.19.0",
    "typing-extensions>=4.0.0; python_version<'3.10'",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-benchmark>=4.0.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=2.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
    "sphinx-autoapi>=2.0.0",
]
examples = [
    "matplotlib>=3.5.0",
    "scikit-learn>=1.0.0",
    "pandas>=1.3.0",
    "jupyter>=1.0.0",
]
benchmark = [
    "tensorflow>=2.8.0",
    "torch>=1.10.0",
    "scikit-learn>=1.0.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "memory-profiler>=0.60.0",
]

[project.urls]
Homepage = "https://github.com/neural-swarm/fann-rust-core"
Documentation = "https://neural-swarm.github.io/fann-rust-core"
Repository = "https://github.com/neural-swarm/fann-rust-core"
"Bug Tracker" = "https://github.com/neural-swarm/fann-rust-core/issues"
Changelog = "https://github.com/neural-swarm/fann-rust-core/blob/main/CHANGELOG.md"

[tool.maturin]
# Python source directory
python-source = "python"
# Features to enable
features = ["python-bindings", "simd", "parallel"]
# Build profile
profile = "release"
# Strip symbols for smaller binaries
strip = true
# Generate stub files for better IDE support
generate-import-lib = true

[tool.maturin.target.x86_64-unknown-linux-gnu]
# Linux-specific build options
rustflags = ["-C", "target-cpu=native", "-C", "opt-level=3"]

[tool.maturin.target.x86_64-pc-windows-msvc]
# Windows-specific build options  
rustflags = ["-C", "target-cpu=native", "-C", "opt-level=3"]

[tool.maturin.target.x86_64-apple-darwin]
# macOS Intel-specific build options
rustflags = ["-C", "target-cpu=native", "-C", "opt-level=3"]

[tool.maturin.target.aarch64-apple-darwin]
# macOS Apple Silicon-specific build options
rustflags = ["-C", "target-cpu=native", "-C", "opt-level=3"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
testpaths = ["tests", "python/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "benchmark: marks tests as benchmarks",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["fann_rust_core"]
known_third_party = ["numpy", "pytest", "setuptools"]
skip_glob = ["build/*", "dist/*", "*.egg-info/*"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "fann_rust_core.fann_rust_core",  # Rust module
]
ignore_missing_imports = true

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F", "W", "I", "N", "UP", "B", "A", "C4", "ICN", "PIE", "T20", "SIM", "ARG", "PTH", "ERA", "PD", "PLE", "PLR", "PLW", "TRY", "NPY", "RUF"]
ignore = [
    "E501",  # Line too long (handled by black)
    "B008",  # Do not perform function calls in argument defaults
    "PLR0913",  # Too many arguments to function call
    "PLR2004",  # Magic value used in comparison
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

line-length = 88
target-version = "py38"

[tool.ruff.per-file-ignores]
"tests/*" = ["PLR2004", "S101", "TID252"]
"examples/*" = ["T201", "PLR2004"]

[tool.ruff.isort]
known-first-party = ["fann_rust_core"]

[tool.coverage.run]
source = ["python/fann_rust_core"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"